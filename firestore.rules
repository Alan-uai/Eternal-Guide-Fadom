/**
 * @fileoverview Firestore Security Rules for Eternal Guide App.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on user roles and content ownership.
 * Strict access control is enforced for user-specific data, while allowing public read access
 * to certain collections like wiki content and game worlds.
 *
 * Data Structure:
 * - /users/{userId}: Stores personal user data, accessible only by the user themselves.
 * - /users/{userId}/savedAnswers/{savedAnswerId}: User-owned saved AI answers.
 * - /users/{userId}/contentSuggestions/{contentSuggestionId}: User-submitted wiki suggestions.
 * - /wikiContent/{wikiContentId}: Publicly readable wiki articles.
 * - /worlds/{worldId}: Publicly readable game world data. Contains subcollections for powers, NPCs, etc.
 * - /worlds/{worldId}/powers/{powerId}: Publicly readable power data for a specific world.
 * - /worlds/{worldId}/powers/{powerId}/stats/{statId}: Publicly readable stat data for a power.
 * - /worlds/{worldId}/npcs/{npcId}: Publicly readable NPC data for a specific world.
 * - /worlds/{worldId}/pets/{petId}: Publicly readable Pet data for a specific world.
 * - /worlds/{worldId}/dungeons/{dungeonId}: Publicly readable Dungeon data for a specific world.
 *
 * Key Security Decisions:
 * - User-specific data (under /users/{userId}) is strictly controlled by the owning user.
 * - World, Power, NPC, Pet, and Dungeon data is publicly readable.
 * - Writes to world data are currently uncontrolled. This should be updated once a content creation mechanism is implemented.
 *
 * Denormalization for Authorization:
 *  - No explicit denormalization is used in this ruleset.
 *
 * Structural Segregation:
 *  - User-specific private data is stored under the /users/{userId} collection, separate from public data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user ID matches the resource's user ID, and that the document exists.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && exists(/databases/$(database)/documents/users/$(userId));
    }

    /**
     * @description Defines a batch write.
     */
    function isBatchWrite() {
      return false; // Removed Batch Write Functionality
    }
    /**
     * @description Rules for user profile information.
     * @path /users/{userId}
     * @allow (create) - User with matching ID can create their own profile.
     * @allow (get, list, update, delete) - User can only access their own profile.
     * @deny (create) - User cannot create a profile with a different ID.
     * @deny (update, delete) - User cannot modify or delete someone else's profile.
     * @principle Enforces document ownership for writes, restricts access to a user's own data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for saved AI-generated answers.
     * @path /users/{userId}/savedAnswers/{savedAnswerId}
     * @allow (create) - User can create saved answers under their profile.
     * @allow (get, list, update, delete) - User can only access their own saved answers.
     * @deny (create) - User cannot create saved answers for someone else.
     * @deny (update, delete) - User cannot modify or delete someone else's saved answers.
     * @principle Enforces document ownership for writes, restricts access to a user's own data.
     */
    match /users/{userId}/savedAnswers/{savedAnswerId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

        /**
     * @description Rules for content suggestions made by the user for the Wiki.
     * @path /users/{userId}/contentSuggestions/{contentSuggestionId}
     * @allow (create) - User can create content suggestions under their profile.
     * @allow (get, list, update, delete) - User can only access their own content suggestions.
     * @deny (create) - User cannot create content suggestions for someone else.
     * @deny (update, delete) - User cannot modify or delete someone else's content suggestions.
     * @principle Enforces document ownership for writes, restricts access to a user's own data.
     */
    match /users/{userId}/contentSuggestions/{contentSuggestionId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for general wiki articles.
     * @path /wikiContent/{wikiContentId}
     * @allow (get, list) - Anyone can read wiki content.
     * @deny (create, update, delete) - Only admins can modify wiki content (currently disabled).
     * // TODO: Implement admin role and secure write access.
     * @principle Public read access with restricted write access.
     */
    match /wikiContent/{wikiContentId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role validation once implemented.
    }

        /**
     * @description Rules for top-level game world data.
     * @path /worlds/{worldId}
     * @allow (get, list) - Anyone can read world data.
     * @deny (create, update, delete) - Only admins can modify world data (currently disabled).
     * // TODO: Implement admin role and secure write access.
     * @principle Public read access with restricted write access.
     */
    match /worlds/{worldId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role validation once implemented.
    }

    /**
     * @description Rules for powers available in a world.
     * @path /worlds/{worldId}/powers/{powerId}
     * @allow (get, list) - Anyone can read power data.
     * @deny (create, update, delete) - Only admins can modify power data (currently disabled).
     * // TODO: Implement admin role and secure write access.
     * @principle Public read access with restricted write access.
     */
    match /worlds/{worldId}/powers/{powerId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role validation once implemented.
    }

    /**
     * @description Rules for individual levels and stats for a specific power.
     * @path /worlds/{worldId}/powers/{powerId}/stats/{statId}
     * @allow (get, list) - Anyone can read power stat data.
     * @deny (create, update, delete) - Only admins can modify power stat data (currently disabled).
     * // TODO: Implement admin role and secure write access.
     * @principle Public read access with restricted write access.
     */
    match /worlds/{worldId}/powers/{powerId}/stats/{statId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role validation once implemented.
    }

    /**
     * @description Rules for NPCs found in a world.
     * @path /worlds/{worldId}/npcs/{npcId}
     * @allow (get, list) - Anyone can read NPC data.
     * @deny (create, update, delete) - Only admins can modify NPC data (currently disabled).
     * // TODO: Implement admin role and secure write access.
     * @principle Public read access with restricted write access.
     */
    match /worlds/{worldId}/npcs/{npcId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role validation once implemented.
    }

    /**
     * @description Rules for pets available in a world.
     * @path /worlds/{worldId}/pets/{petId}
     * @allow (get, list) - Anyone can read pet data.
     * @deny (create, update, delete) - Only admins can modify pet data (currently disabled).
     * // TODO: Implement admin role and secure write access.
     * @principle Public read access with restricted write access.
     */
    match /worlds/{worldId}/pets/{petId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role validation once implemented.
    }

    /**
     * @description Rules for dungeons located in a world.
     * @path /worlds/{worldId}/dungeons/{dungeonId}
     * @allow (get, list) - Anyone can read dungeon data.
     * @deny (create, update, delete) - Only admins can modify dungeon data (currently disabled).
     * // TODO: Implement admin role and secure write access.
     * @principle Public read access with restricted write access.
     */
    match /worlds/{worldId}/dungeons/{dungeonId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role validation once implemented.
    }
  }
}