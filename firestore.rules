/**
 * @fileoverview Firestore Security Rules for the Eternal Guide application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data (saved answers, content suggestions) stored under the `/users/{userId}` path.
 * Wiki content is publicly readable but requires authentication for modifications (TODO: Implement write restrictions).
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user themselves.
 * - /users/{userId}/savedAnswers/{savedAnswerId}: Stores AI-generated answers saved by the user.
 * - /users/{userId}/contentSuggestions/{contentSuggestionId}: Stores content suggestions made by the user.
 * - /wikiContent/{wikiContentId}: Stores publicly readable wiki content. Write rules are currently open (TODO: Restrict writes to authorized users).
 *
 * Key Security Decisions:
 * - Users can only access their own data.
 * - Listing all users is disallowed for privacy.
 * - Wiki content is publicly readable, but write access is currently unrestricted (TODO).
 * - Relational integrity is enforced on create and update operations to ensure that data is correctly associated with the user.
 *
 * Denormalization for Authorization:
 * The `userId` field is present in both `SavedAnswer` and `ContentSuggestion` documents, enabling direct ownership checks without additional `get()` calls.
 *
 * Structural Segregation:
 * User-specific data is stored under the `/users/{userId}` path, while public wiki content is stored in the top-level `/wikiContent` collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description: Controls access to user profile information.
     * @path: /users/{userId}
     * @allow: User with UID 'user123' can create their own profile (create).
     * @deny: User with UID 'user456' attempts to create a profile for 'user123' (create).
     * @principle: Enforces document ownership; users can only manage their own profiles.
     */
    match /users/{userId} {
      // Function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Function to check if the user is the owner of the resource
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
        allow get: if isOwner(userId);
        allow list: if false;
        allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
        allow update: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
        allow delete: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
    }

    /**
     * @description: Controls access to AI-generated answers saved by the user.
     * @path: /users/{userId}/savedAnswers/{savedAnswerId}
     * @allow: User with UID 'user123' can create a saved answer under their profile (create).
     * @deny: User with UID 'user456' attempts to create a saved answer under 'user123' profile (create).
     * @principle: Enforces document ownership; users can only manage their own saved answers.
     */
    match /users/{userId}/savedAnswers/{savedAnswerId} {
        // Function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Function to check if the user is the owner of the resource
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.userId == userId;
      allow delete: if isSignedIn() && isOwner(userId) && resource.data.userId == userId;
    }

    /**
     * @description: Controls access to content suggestions made by the user.
     * @path: /users/{userId}/contentSuggestions/{contentSuggestionId}
     * @allow: User with UID 'user123' can create a content suggestion under their profile (create).
     * @deny: User with UID 'user456' attempts to create a content suggestion under 'user123' profile (create).
     * @principle: Enforces document ownership; users can only manage their own content suggestions.
     */
    match /users/{userId}/contentSuggestions/{contentSuggestionId} {
       // Function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Function to check if the user is the owner of the resource
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.userId == userId;
      allow delete: if isSignedIn() && isOwner(userId) && resource.data.userId == userId;
    }

    /**
     * @description: Controls access to wiki content.
     * @path: /wikiContent/{wikiContentId}
     * @allow: Any user can read wiki content (get, list).
     * @deny: (TODO) Define conditions for writing to wiki content based on user roles or permissions.
     * @principle: Allows public read access to wiki content while restricting write access (TODO).
     */
    match /wikiContent/{wikiContentId} {
      // Function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}